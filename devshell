#!/usr/bin/env bash

set -euo pipefail

project_name="general"
default_variant="archlinux"
default_container_name="none"
default_home_volume="none"
default_args=("/usr/bin/zsh")
default_ro_paths=(".git" ".local")

script_dir=$(dirname $(readlink -f $0))
base_dir=$(git rev-parse --show-toplevel 2>/dev/null || pwd)
variant=${DEVSHELL_VARIANT:-$default_variant}
dockerfile=Dockerfile.${variant}
container_name=${DEVSHELL_CONTAINER_NAME:-${default_container_name}}
home_volume=${DEVSHELL_HOME_VOLUME:-${default_home_volume}}

### Figure out if we need to rebuild the docker image

image_source_files=(
  $dockerfile
  entrypoint.sh
  entrypoint-user.sh
)
image_source_mtime=$(
  for file in ${image_source_files[@]}; do
    stat -c %Y $script_dir/$file
  done \
  | sort -nr | head -n1
)

image_name="${project_name}-devshell:${variant}"
need_to_build=true

if [[ -n $(docker images -q $image_name) ]]; then
  image_mtime=$(docker image inspect $image_name | jq ".[0].Created" | xargs date +%s -d)
  if [[ $image_mtime -gt $image_source_mtime ]]; then
    need_to_build=false
  fi
fi

if $need_to_build; then
  echo "Building docker image..."
  no_cache=$([[ ${CACHE:-"yes"} == "no" ]] && echo "--no-cache" || echo)
  docker build $no_cache -f $script_dir/$dockerfile -t $image_name $script_dir
fi

### Options

if [[ -v DEVSHELL_DOCKER_OPTS ]]; then
  docker_opts=($DEVSHELL_DOCKER_OPTS)
else
  docker_opts=("-it")
fi

if [[ $# > 0 ]]; then
  args=("$@")
else
  args=("$default_args")
fi

if [[ $container_name != "none" ]]; then
  container_id=$(docker container ls -q --filter=name=$container_name)
  if [[ -n $container_id ]]; then
    found_image_name=$(docker inspect $container_id --format="{{.Config.Image}}")
    if [[ $found_image_name != $image_name ]]; then
      echo >&2 "Running container \"${container_name}\" has a different image:" \
        "${found_image_name} vs ${image_name}."
      exit 1
    fi
  fi
fi

if [[ ${container_id:-} ]]; then
  exec docker exec $docker_opts $container_id /usr/local/bin/entrypoint.sh "${args[@]}"
else
  if [[ $container_name != "none" ]]; then
    docker_opts+=("--name" ${container_name})
  fi

  if [[ $home_volume != "none" ]]; then
    docker_opts+=("--volume" "${home_volume}:/home/user")
  fi

  if [[ ${DEVSHELL_SSH:-} == "yes" ]]; then
    ssh_auth_sock=$(readlink -f ${SSH_AUTH_SOCK})
    docker_opts+=(
      "--volume" "${ssh_auth_sock}:${ssh_auth_sock}"
      "--env" "SSH_AUTH_SOCK=${ssh_auth_sock}"
    )
  fi

  if [[ ${DEVSHELL_SUDO:-} == "no" ]]; then
    docker_opts+=("--security-opt" "no-new-privileges")
  fi

  if [[ ! -v DEVSHELL_RO_PATHS ]]; then
    ro_paths=("${default_ro_paths[@]}")
  else
    IFS=':' read -r -a ro_paths <<< ${DEVSHELL_RO_PATHS}
  fi
  for subdir_relative in "${ro_paths[@]}"; do
    subdir="${base_dir}/${subdir_relative}"
    docker_opts+=("--volume" "${subdir}:${subdir}:ro")
  done

  # Local ZSH config
  if [[ -d ${HOME}/.zprezto ]]; then
    docker_opts+=("--volume" "${HOME}/.zprezto:/usr/local/lib/prezto:ro")
  fi

  exec docker run --rm "${docker_opts[@]}" \
    --volume ${base_dir}:${base_dir} \
    --env TERM=${TERM} \
    --env DEVSHELL_VARIANT=${variant} \
    --env DEVSHELL_PROJECT_DIR=${base_dir} \
    "${image_name}" \
    "${args[@]}"
fi
